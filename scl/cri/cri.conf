#########################################################
# Parser for CRI log format
# ISO_TIME(nano) SP STREAM SP TAG SP MSG
# https://github.com/kubernetes/kubernetes/issues/44976
#========================================================
# Retrieves information about K8S meta from log filename:
#  - container ID
#  - container Name
#  - POD NameSpace
#  - POD Name
# Use .cri prefix
# Set .cri.time as S_ISODATE with use of date-parser()
#
# Note: does not support multiline, line = message
#########################################################
# Example log:
# 2022-02-04T18:14:43.219493781+01:00 stdout F Starting up on port 80

@define crio-log-regexp "([a-z0-9-]+)_([a-z0-9-]+)_([a-z0-9]+)-([a-z0-9]{64}).log"

block rewrite extract-container-id (value("MESSAGE")){
    # make the container-id of 12 characters long as usual in cli
    subst("`crio-log-regexp`", "$(substr $4 0 12)", value("`value`"), flags(global, store-matches), type(pcre));
};

block parser cri-parser(prefix('.cri.')) {
    channel {
        parser {
            csv-parser(
                columns("`prefix`time", "`prefix`stream", "`prefix`flag", "`prefix`message")
                delimiters(" ")
                flags(greedy)
            );
            # set S_ISODATE to value of ${.cri.time}
            date-parser(format("%FT%H:%M:%S.%f%Z") template("${.cri.time}"));
        };
	# drop everything which does not match (to exclude logs)
        #filter { not match("" value("`prefix`COMMAND") type(string)); };
        rewrite {
            set("$(basename \"${FILE_NAME}\")", value("`prefix`container.id"));
            extract-container-id(value("`prefix`container.id"));
            set("$1", value("`prefix`pod.name"));
            set("$2", value("`prefix`pod.namespace"));
            set("$3", value("`prefix`container.name"));
        };
    };
};

application cri[syslog] {
    parser { cri-parser(); };
};
